import React from 'react';
import ReactDOM from 'react-dom';
import {Tabs, Tab} from 'react-bootstrap';

import EmbarkJS from 'Embark/EmbarkJS';
import Blockchain from './components/blockchain';
import Whisper from './components/whisper';
import Storage from './components/storage';
import ENS from './components/ens';

import AdkSplitterForTwo from 'Embark/contracts/AdkSplitterForTwo';

import './dapp.css';

class App extends React.Component 
{
//  _blockchainLogsSubscription     = null;
//  _pendingTransactionSubscription = null;
//  _ethFilterSubscription          = null;



  constructor(props) 
  {
    super(props);

    this.handleSelect = this.handleSelect.bind(this);

    this.state = 
    {
      // auto generated by embark demo
      //
      error            : null ,
      activeKey        :     1,
      whisperEnabled   : false,
      storageEnabled   : false,
      blockchainEnabled: false,

      // copy-pasted from my truffle dapp
      //
      web3                        : null,
      accounts                    : null,
      contract                    : null,
      senderAccountAddress        : null,
      firstReceiverAccountAddress : null,
      secondReceiverAccountAddress: null,
      firstReceiverBalance        : null,
      secondReceiverBalance       : null,
      senderBalance               : null,
      contractAddress             : null,
      contractBalance             : null

    };
  }

  componentDidMount() 
  {
    EmbarkJS.onReady((err) => 
    {
      this.setState({blockchainEnabled: true});
      if (err) 
      {
        // If err is not null then it means something went wrong connecting to ethereum
        // you can use this to ask the user to enable metamask for e.g
        return this.setState({error: err.message || err});
      }

      EmbarkJS.Messages.Providers.whisper.getWhisperVersion(
      (err, _version) => 
      {
        if (err) {
          return console.log(err);
        }
        this.setState({whisperEnabled: true});
      });

      EmbarkJS.Storage.isAvailable().then(
      (result) => 
      {
        this.setState({storageEnabled: result});
      })
      .catch(
      () => 
      {
        this.setState({storageEnabled: false});
      });
  
      await this.initializeSplitter();


      });
  }

  initializeSplitter = async () =>
  {
    try
    {
      console.log("=== componentDidMount");


      // Use web3 to get the user's accounts.
      const accounts = await web3.eth.getAccounts();

      // Get the contract instance.
      //
      const instance = AdkSplitterForTwo;
      const instanceAddress = await instance.GetContractAddress();

      console.log(instance);
      console.log("contract : " + instanceAddress);


      var sender         = accounts[0];
      var firstReceiver  = accounts[1];
      var secondReceiver = accounts[2];


      var senderBalance         = await web3.eth.getBalance(sender         );
      var firstReceiverBalance  = await web3.eth.getBalance(firstReceiver  );
      var secondReceiverBalance = await web3.eth.getBalance(secondReceiver );
      var instanceBalance       = await web3.eth.getBalance(instanceAddress);

      // Set web3, accounts, and contract to the state, and then proceed with an
      // example of interacting with the contract's methods.
      this.setState(
          {
              web3                        : web3                ,
              accounts                    : accounts            ,
              contract                    : instance            ,
              senderAccountAddress        : sender              ,
              firstReceiverAccountAddress : firstReceiver       ,
              secondReceiverAccountAddress: secondReceiver      ,
              senderBalance               : senderBalance       ,
              firstReceiverBalance        : firstReceiverBalance,
              secondReceiverBalance       : secondReceiverBalance,
              contractAddress             : instanceAddress      ,
              contractBalance             : instanceBalance
          }
      ); // this.setState()


// ========== subscriptions  ================= //
// 
// TODO: make a separate function
//
//============================


      console.log("[BEGIN] subscribing logs...");
  //    this._blockchainLogsSubscription =
          web3.eth.subscribe(
              'logs'                                 ,
               { address: instanceAddress }          ,
               this.onContractStateChangeSubscribed  );
      console.log("[END] subscribed logs.");


    }
    catch (error)
    {
      // Catch any errors for any of the above operations.
      alert(
        `Failed to load web3, accounts, or contract. Check console for details.`
      );
      console.log(error);
    } // catch

  }; // initializeSplitter


  performSplit = async () =>
  {

     console.log("=== [begin] perform split");
    // TODO: fix hard code

     var submittedTransaction = // fired events can be observed in this object
     await this.state.contract.Split(
         this.state.firstReceiverAccountAddress,
         this.state.secondReceiverAccountAddress,
         {
             from: this.state.senderAccountAddress,
             value: 1000000,
             gasPrice: 10000 
         });

     console.log("Split transaction : ");
     console.log(submittedTransaction);


// this works as event listener too
// commented to test the ```web3.eth.subscribe('pendingTransactions')```
// 
//
//
     await this.onContractStateChangedImpl();

     console.log("=== [end] perform split"); 

    // the changes will be updated by the log events listener

  }; // runExample

  onContractStateChangedImpl = async () =>
  {
      console.log("===== onContractStateChangedImpl");

      var web3 = this.state.web3;

      var senderBalance         = await web3.eth.getBalance(this.state.senderAccountAddress         );
      var firstReceiverBalance  = await web3.eth.getBalance(this.state.firstReceiverAccountAddress  );
      var secondReceiverBalance = await web3.eth.getBalance(this.state.secondReceiverAccountAddress );
      var instanceBalance       = await web3.eth.getBalance(this.state.contractAddress              );

      console.log("[BEGIN] setState()");


      // Set web3, accounts, and contract to the state, and then proceed with an
      // example of interacting with the contract's methods.
         

      this.setState(
         {
              senderBalance               : senderBalance       ,
              firstReceiverBalance        : firstReceiverBalance,
              secondReceiverBalance       : secondReceiverBalance,
              contractBalance             : instanceBalance
          }
      ); // this.setState()
      
      console.log("[END] setState()");
  }


  onContractStateChangeSubscribed = async (maybeError, maybeResult) =>
  {
      console.log("=== contract state changed");

      console.log(maybeResult);

      await this.onContractStateChangedImpl();
 }



  _renderStatus(title, available) 
  {
    let className = available ? 'pull-right status-online' : 'pull-right status-offline';
    return <React.Fragment>
      {title}
      <span className={className}></span>
    </React.Fragment>;
  }

  handleSelect(key) 
  {
    this.setState({ activeKey: key });
  }

  render() 
  {
    const ensEnabled = 
        EmbarkJS.Names.currentNameSystems 
     && EmbarkJS.Names.isAvailable();

    if (this.state.error) 
    {
      return 
      (<div>
        <div>Something went wrong connecting to ethereum. Please make sure you have a node running or are using metamask to connect to the ethereum network:</div>
        <div>{this.state.error}</div>
      </div>);
    }
    
    return 
    (
      <div className="adk Splitter App">
        <h1>Welcome to the excercise ether splitting app</h1>
        <p>When the button is tapped, the transfer should happen</p>
        <h2>Accounts state</h2>


        <table>
        <tbody>
           <tr>
               <th></th>
               <th>Address</th>
               <th>Balance in Wei</th>
               <th>Balance in ether</th>
          </tr>

           <tr>
               <td>Sender</td>
               <td>{this.state.senderAccountAddress}</td>
               <td>{this.state.senderBalance}</td>
               <td>{ this.state.web3.utils.fromWei( this.state.senderBalance, 'ether') }</td>
           </tr>

          <tr>
               <td>First Receiver</td>
               <td>{this.state.firstReceiverAccountAddress}</td>
               <td>{this.state.firstReceiverBalance}</td>
               <td>{ this.state.web3.utils.fromWei( this.state.firstReceiverBalance, 'ether') }</td>
           </tr>

          <tr>
               <td>Second Receiver</td>
               <td>{this.state.secondReceiverAccountAddress}</td>
               <td>{this.state.secondReceiverBalance}</td>
               <td>{ this.state.web3.utils.fromWei( this.state.secondReceiverBalance, 'ether') }</td>
           </tr>



           <tr>
               <td>Contract</td>
               <td>{this.state.contractAddress}</td>
               <td>{this.state.contractBalance}</td>
               <td>{ this.state.web3.utils.fromWei( this.state.contractBalance, 'ether') }</td>
           </tr>

        </tbody>
        </table>


        <p>

             <button onClick={ () => this.performSplit() }  > Split ether  </button>
        </p>

      </div>



// auto generated stuff. not deleted yet
//
<div>
      <h3>Embark - Usage Example</h3>
      <Tabs onSelect={this.handleSelect} activeKey={this.state.activeKey} id="uncontrolled-tab-example">
        <Tab eventKey={1} title={this._renderStatus('Blockchain', this.state.blockchainEnabled)}>
          <Blockchain/>
        </Tab>
        <Tab eventKey={2} title={this._renderStatus('Decentralized Storage', this.state.storageEnabled)}>
          <Storage enabled={this.state.storageEnabled}/>
        </Tab>
        <Tab eventKey={3} title={this._renderStatus('P2P communication (Whisper)', this.state.whisperEnabled)}>
          <Whisper enabled={this.state.whisperEnabled}/>
        </Tab>
        <Tab eventKey={4} title={this._renderStatus('Naming (ENS)', ensEnabled)}>
          <ENS enabled={ensEnabled}/>
        </Tab>
      </Tabs>
    </div>);
  }
}

ReactDOM.render(<App></App>, document.getElementById('app'));
